
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Jan 01 21:42:33 CST 2022
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Jan 01 21:42:33 CST 2022
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\107\000\002\002\004\000\002\002\011\000\002\002" +
    "\010\000\002\003\004\000\002\003\003\000\002\003\004" +
    "\000\002\003\003\000\002\003\004\000\002\003\003\000" +
    "\002\003\004\000\002\003\003\000\002\003\005\000\002" +
    "\003\004\000\002\003\003\000\002\003\004\000\002\003" +
    "\003\000\002\003\004\000\002\003\003\000\002\003\004" +
    "\000\002\003\003\000\002\003\004\000\002\003\003\000" +
    "\002\004\005\000\002\004\007\000\002\004\007\000\002" +
    "\004\006\000\002\004\006\000\002\004\005\000\002\004" +
    "\007\000\002\004\007\000\002\004\006\000\002\004\006" +
    "\000\002\004\010\000\002\004\010\000\002\004\011\000" +
    "\002\004\011\000\002\004\005\000\002\004\005\000\002" +
    "\006\011\000\002\013\003\000\002\013\005\000\002\013" +
    "\005\000\002\013\005\000\002\013\006\000\002\013\007" +
    "\000\002\007\015\000\002\010\011\000\002\011\013\000" +
    "\002\012\011\000\002\014\012\000\002\014\011\000\002" +
    "\005\005\000\002\005\004\000\002\005\004\000\002\015" +
    "\016\000\002\016\011\000\002\016\010\000\002\017\003" +
    "\000\002\017\005\000\002\017\003\000\002\020\012\000" +
    "\002\021\010\000\002\021\013\000\002\021\010\000\002" +
    "\021\013\000\002\022\011\000\002\022\007\000\002\023" +
    "\004\000\002\023\003\000\002\023\003\000\002\023\004" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\334\000\006\007\006\036\004\001\002\000\004\030" +
    "\332\001\002\000\004\002\331\001\002\000\004\036\007" +
    "\001\002\000\004\030\010\001\002\000\004\031\011\001" +
    "\002\000\004\032\012\001\002\000\026\006\026\007\022" +
    "\010\027\011\030\014\035\015\013\030\014\040\021\042" +
    "\032\050\024\001\002\000\004\030\276\001\002\000\012" +
    "\006\264\007\265\010\027\040\021\001\002\000\040\006" +
    "\ufff7\007\ufff7\010\ufff7\011\ufff7\013\ufff7\014\ufff7\015\ufff7" +
    "\030\ufff7\033\ufff7\037\ufff7\040\ufff7\042\ufff7\044\ufff7\045" +
    "\ufff7\050\ufff7\001\002\000\040\006\ufffd\007\ufffd\010\ufffd" +
    "\011\ufffd\013\ufffd\014\ufffd\015\ufffd\030\ufffd\033\ufffd\037" +
    "\ufffd\040\ufffd\042\ufffd\044\ufffd\045\ufffd\050\ufffd\001\002" +
    "\000\032\006\026\007\022\010\027\011\030\013\067\014" +
    "\035\015\013\030\014\033\262\040\021\042\032\050\024" +
    "\001\002\000\040\006\ufff2\007\ufff2\010\ufff2\011\ufff2\013" +
    "\ufff2\014\ufff2\015\ufff2\030\ufff2\033\ufff2\037\ufff2\040\ufff2" +
    "\042\ufff2\044\ufff2\045\ufff2\050\ufff2\001\002\000\006\016" +
    "\257\024\256\001\002\000\006\026\227\040\230\001\002" +
    "\000\040\006\ufffb\007\ufffb\010\ufffb\011\ufffb\013\ufffb\014" +
    "\ufffb\015\ufffb\030\ufffb\033\ufffb\037\ufffb\040\ufffb\042\ufffb" +
    "\044\ufffb\045\ufffb\050\ufffb\001\002\000\004\030\212\001" +
    "\002\000\040\006\ufff9\007\ufff9\010\ufff9\011\ufff9\013\ufff9" +
    "\014\ufff9\015\ufff9\030\ufff9\033\ufff9\037\ufff9\040\ufff9\042" +
    "\ufff9\044\ufff9\045\ufff9\050\ufff9\001\002\000\006\026\163" +
    "\040\164\001\002\000\004\040\144\001\002\000\004\030" +
    "\132\001\002\000\040\006\uffec\007\uffec\010\uffec\011\uffec" +
    "\013\uffec\014\uffec\015\uffec\030\uffec\033\uffec\037\uffec\040" +
    "\uffec\042\uffec\044\uffec\045\uffec\050\uffec\001\002\000\004" +
    "\030\103\001\002\000\040\006\ufff0\007\ufff0\010\ufff0\011" +
    "\ufff0\013\ufff0\014\ufff0\015\ufff0\030\ufff0\033\ufff0\037\ufff0" +
    "\040\ufff0\042\ufff0\044\ufff0\045\ufff0\050\ufff0\001\002\000" +
    "\040\006\ufff4\007\ufff4\010\ufff4\011\ufff4\013\ufff4\014\ufff4" +
    "\015\ufff4\030\ufff4\033\ufff4\037\ufff4\040\ufff4\042\ufff4\044" +
    "\ufff4\045\ufff4\050\ufff4\001\002\000\004\030\037\001\002" +
    "\000\040\006\uffee\007\uffee\010\uffee\011\uffee\013\uffee\014" +
    "\uffee\015\uffee\030\uffee\033\uffee\037\uffee\040\uffee\042\uffee" +
    "\044\uffee\045\uffee\050\uffee\001\002\000\006\027\041\040" +
    "\042\001\002\000\004\031\053\001\002\000\006\031\uffda" +
    "\037\uffda\001\002\000\004\024\043\001\002\000\012\005" +
    "\045\027\046\040\047\041\044\001\002\000\006\031\uffd8" +
    "\037\uffd8\001\002\000\006\005\050\040\051\001\002\000" +
    "\006\031\uffd9\037\uffd9\001\002\000\006\031\uffd7\037\uffd7" +
    "\001\002\000\006\031\uffd6\037\uffd6\001\002\000\004\005" +
    "\052\001\002\000\006\031\uffd5\037\uffd5\001\002\000\004" +
    "\032\054\001\002\000\026\006\026\007\022\010\027\011" +
    "\030\014\035\015\013\030\014\040\021\042\032\050\024" +
    "\001\002\000\032\006\026\007\022\010\027\011\030\013" +
    "\067\014\035\015\013\030\014\033\062\040\021\042\032" +
    "\050\024\001\002\000\040\006\ufff8\007\ufff8\010\ufff8\011" +
    "\ufff8\013\ufff8\014\ufff8\015\ufff8\030\ufff8\033\ufff8\037\ufff8" +
    "\040\ufff8\042\ufff8\044\ufff8\045\ufff8\050\ufff8\001\002\000" +
    "\040\006\ufffe\007\ufffe\010\ufffe\011\ufffe\013\ufffe\014\ufffe" +
    "\015\ufffe\030\ufffe\033\ufffe\037\ufffe\040\ufffe\042\ufffe\044" +
    "\ufffe\045\ufffe\050\ufffe\001\002\000\040\006\ufff3\007\ufff3" +
    "\010\ufff3\011\ufff3\013\ufff3\014\ufff3\015\ufff3\030\ufff3\033" +
    "\ufff3\037\ufff3\040\ufff3\042\ufff3\044\ufff3\045\ufff3\050\ufff3" +
    "\001\002\000\040\006\ufffc\007\ufffc\010\ufffc\011\ufffc\013" +
    "\ufffc\014\ufffc\015\ufffc\030\ufffc\033\ufffc\037\ufffc\040\ufffc" +
    "\042\ufffc\044\ufffc\045\ufffc\050\ufffc\001\002\000\040\006" +
    "\uffd3\007\uffd3\010\uffd3\011\uffd3\013\uffd3\014\uffd3\015\uffd3" +
    "\030\uffd3\033\uffd3\037\uffd3\040\uffd3\042\uffd3\044\uffd3\045" +
    "\uffd3\050\uffd3\001\002\000\040\006\ufffa\007\ufffa\010\ufffa" +
    "\011\ufffa\013\ufffa\014\ufffa\015\ufffa\030\ufffa\033\ufffa\037" +
    "\ufffa\040\ufffa\042\ufffa\044\ufffa\045\ufffa\050\ufffa\001\002" +
    "\000\004\013\067\001\002\000\040\006\uffed\007\uffed\010" +
    "\uffed\011\uffed\013\uffed\014\uffed\015\uffed\030\uffed\033\uffed" +
    "\037\uffed\040\uffed\042\uffed\044\uffed\045\uffed\050\uffed\001" +
    "\002\000\040\006\ufff1\007\ufff1\010\ufff1\011\ufff1\013\ufff1" +
    "\014\ufff1\015\ufff1\030\ufff1\033\ufff1\037\ufff1\040\ufff1\042" +
    "\ufff1\044\ufff1\045\ufff1\050\ufff1\001\002\000\004\032\072" +
    "\001\002\000\040\006\ufff5\007\ufff5\010\ufff5\011\ufff5\013" +
    "\ufff5\014\ufff5\015\ufff5\030\ufff5\033\ufff5\037\ufff5\040\ufff5" +
    "\042\ufff5\044\ufff5\045\ufff5\050\ufff5\001\002\000\040\006" +
    "\uffef\007\uffef\010\uffef\011\uffef\013\uffef\014\uffef\015\uffef" +
    "\030\uffef\033\uffef\037\uffef\040\uffef\042\uffef\044\uffef\045" +
    "\uffef\050\uffef\001\002\000\026\006\026\007\022\010\027" +
    "\011\030\014\035\015\013\030\014\040\021\042\032\050" +
    "\024\001\002\000\032\006\026\007\022\010\027\011\030" +
    "\013\067\014\035\015\013\030\014\033\074\040\021\042" +
    "\032\050\024\001\002\000\004\014\075\001\002\000\004" +
    "\030\076\001\002\000\006\027\041\040\042\001\002\000" +
    "\004\031\100\001\002\000\004\037\101\001\002\000\040" +
    "\006\uffd2\007\uffd2\010\uffd2\011\uffd2\013\uffd2\014\uffd2\015" +
    "\uffd2\030\uffd2\033\uffd2\037\uffd2\040\uffd2\042\uffd2\044\uffd2" +
    "\045\uffd2\050\uffd2\001\002\000\040\006\ufff6\007\ufff6\010" +
    "\ufff6\011\ufff6\013\ufff6\014\ufff6\015\ufff6\030\ufff6\033\ufff6" +
    "\037\ufff6\040\ufff6\042\ufff6\044\ufff6\045\ufff6\050\ufff6\001" +
    "\002\000\004\040\104\001\002\000\004\031\105\001\002" +
    "\000\004\032\106\001\002\000\004\043\107\001\002\000" +
    "\010\005\120\040\122\041\117\001\002\000\004\047\111" +
    "\001\002\000\004\045\112\001\002\000\026\006\026\007" +
    "\022\010\027\011\030\014\035\015\013\030\014\040\021" +
    "\042\032\050\024\001\002\000\032\006\026\007\022\010" +
    "\027\011\030\013\067\014\035\015\013\030\014\040\021" +
    "\042\032\044\114\050\024\001\002\000\004\037\115\001" +
    "\002\000\004\033\116\001\002\000\040\006\uffcb\007\uffcb" +
    "\010\uffcb\011\uffcb\013\uffcb\014\uffcb\015\uffcb\030\uffcb\033" +
    "\uffcb\037\uffcb\040\uffcb\042\uffcb\044\uffcb\045\uffcb\050\uffcb" +
    "\001\002\000\004\045\uffc8\001\002\000\004\040\130\001" +
    "\002\000\004\045\123\001\002\000\004\045\uffc6\001\002" +
    "\000\026\006\026\007\022\010\027\011\030\014\035\015" +
    "\013\030\014\040\021\042\032\050\024\001\002\000\032" +
    "\006\026\007\022\010\027\011\030\013\067\014\035\015" +
    "\013\030\014\040\021\042\032\044\125\050\024\001\002" +
    "\000\004\037\126\001\002\000\006\043\107\047\uffc9\001" +
    "\002\000\004\047\uffca\001\002\000\004\005\131\001\002" +
    "\000\004\045\uffc7\001\002\000\006\027\041\040\042\001" +
    "\002\000\004\031\134\001\002\000\004\032\135\001\002" +
    "\000\026\006\026\007\022\010\027\011\030\014\035\015" +
    "\013\030\014\040\021\042\032\050\024\001\002\000\032" +
    "\006\026\007\022\010\027\011\030\013\067\014\035\015" +
    "\013\030\014\033\137\040\021\042\032\050\024\001\002" +
    "\000\042\006\uffdb\007\uffdb\010\uffdb\011\uffdb\012\140\013" +
    "\uffdb\014\uffdb\015\uffdb\030\uffdb\033\uffdb\037\uffdb\040\uffdb" +
    "\042\uffdb\044\uffdb\045\uffdb\050\uffdb\001\002\000\004\032" +
    "\141\001\002\000\026\006\026\007\022\010\027\011\030" +
    "\014\035\015\013\030\014\040\021\042\032\050\024\001" +
    "\002\000\032\006\026\007\022\010\027\011\030\013\067" +
    "\014\035\015\013\030\014\033\143\040\021\042\032\050" +
    "\024\001\002\000\040\006\uffd4\007\uffd4\010\uffd4\011\uffd4" +
    "\013\uffd4\014\uffd4\015\uffd4\030\uffd4\033\uffd4\037\uffd4\040" +
    "\uffd4\042\uffd4\044\uffd4\045\uffd4\050\uffd4\001\002\000\006" +
    "\016\146\025\145\001\002\000\004\005\155\001\002\000" +
    "\004\005\147\001\002\000\006\005\150\040\151\001\002" +
    "\000\004\037\154\001\002\000\004\005\152\001\002\000" +
    "\004\037\153\001\002\000\042\006\uffde\007\uffde\010\uffde" +
    "\011\uffde\013\uffde\014\uffde\015\uffde\030\uffde\031\uffde\033" +
    "\uffde\037\uffde\040\uffde\042\uffde\044\uffde\045\uffde\050\uffde" +
    "\001\002\000\042\006\uffe0\007\uffe0\010\uffe0\011\uffe0\013" +
    "\uffe0\014\uffe0\015\uffe0\030\uffe0\031\uffe0\033\uffe0\037\uffe0" +
    "\040\uffe0\042\uffe0\044\uffe0\045\uffe0\050\uffe0\001\002\000" +
    "\006\005\156\040\157\001\002\000\004\037\162\001\002" +
    "\000\004\005\160\001\002\000\004\037\161\001\002\000" +
    "\042\006\uffdf\007\uffdf\010\uffdf\011\uffdf\013\uffdf\014\uffdf" +
    "\015\uffdf\030\uffdf\031\uffdf\033\uffdf\037\uffdf\040\uffdf\042" +
    "\uffdf\044\uffdf\045\uffdf\050\uffdf\001\002\000\042\006\uffe1" +
    "\007\uffe1\010\uffe1\011\uffe1\013\uffe1\014\uffe1\015\uffe1\030" +
    "\uffe1\031\uffe1\033\uffe1\037\uffe1\040\uffe1\042\uffe1\044\uffe1" +
    "\045\uffe1\050\uffe1\001\002\000\004\040\210\001\002\000" +
    "\014\016\171\025\165\026\170\034\167\037\166\001\002" +
    "\000\004\041\206\001\002\000\042\006\uffe6\007\uffe6\010" +
    "\uffe6\011\uffe6\013\uffe6\014\uffe6\015\uffe6\030\uffe6\031\uffe6" +
    "\033\uffe6\037\uffe6\040\uffe6\042\uffe6\044\uffe6\045\uffe6\050" +
    "\uffe6\001\002\000\006\035\176\041\175\001\002\000\004" +
    "\037\174\001\002\000\004\041\172\001\002\000\004\037" +
    "\173\001\002\000\042\006\uffe4\007\uffe4\010\uffe4\011\uffe4" +
    "\013\uffe4\014\uffe4\015\uffe4\030\uffe4\031\uffe4\033\uffe4\037" +
    "\uffe4\040\uffe4\042\uffe4\044\uffe4\045\uffe4\050\uffe4\001\002" +
    "\000\042\006\uffe3\007\uffe3\010\uffe3\011\uffe3\013\uffe3\014" +
    "\uffe3\015\uffe3\030\uffe3\031\uffe3\033\uffe3\037\uffe3\040\uffe3" +
    "\042\uffe3\044\uffe3\045\uffe3\050\uffe3\001\002\000\004\035" +
    "\204\001\002\000\004\016\177\001\002\000\004\034\200" +
    "\001\002\000\004\041\201\001\002\000\004\035\202\001" +
    "\002\000\004\037\203\001\002\000\040\006\uffc3\007\uffc3" +
    "\010\uffc3\011\uffc3\013\uffc3\014\uffc3\015\uffc3\030\uffc3\033" +
    "\uffc3\037\uffc3\040\uffc3\042\uffc3\044\uffc3\045\uffc3\050\uffc3" +
    "\001\002\000\004\037\205\001\002\000\040\006\uffc4\007" +
    "\uffc4\010\uffc4\011\uffc4\013\uffc4\014\uffc4\015\uffc4\030\uffc4" +
    "\033\uffc4\037\uffc4\040\uffc4\042\uffc4\044\uffc4\045\uffc4\050" +
    "\uffc4\001\002\000\004\037\207\001\002\000\042\006\uffe5" +
    "\007\uffe5\010\uffe5\011\uffe5\013\uffe5\014\uffe5\015\uffe5\030" +
    "\uffe5\031\uffe5\033\uffe5\037\uffe5\040\uffe5\042\uffe5\044\uffe5" +
    "\045\uffe5\050\uffe5\001\002\000\004\037\211\001\002\000" +
    "\042\006\uffe2\007\uffe2\010\uffe2\011\uffe2\013\uffe2\014\uffe2" +
    "\015\uffe2\030\uffe2\031\uffe2\033\uffe2\037\uffe2\040\uffe2\042" +
    "\uffe2\044\uffe2\045\uffe2\050\uffe2\001\002\000\006\005\213" +
    "\040\214\001\002\000\006\040\220\041\217\001\002\000" +
    "\004\031\215\001\002\000\004\037\216\001\002\000\040" +
    "\006\uffbf\007\uffbf\010\uffbf\011\uffbf\013\uffbf\014\uffbf\015" +
    "\uffbf\030\uffbf\033\uffbf\037\uffbf\040\uffbf\042\uffbf\044\uffbf" +
    "\045\uffbf\050\uffbf\001\002\000\010\005\uffbc\040\220\041" +
    "\217\001\002\000\010\005\uffbd\040\220\041\217\001\002" +
    "\000\004\005\222\001\002\000\004\031\223\001\002\000" +
    "\004\037\224\001\002\000\040\006\uffc0\007\uffc0\010\uffc0" +
    "\011\uffc0\013\uffc0\014\uffc0\015\uffc0\030\uffc0\033\uffc0\037" +
    "\uffc0\040\uffc0\042\uffc0\044\uffc0\045\uffc0\050\uffc0\001\002" +
    "\000\004\005\uffbe\001\002\000\004\005\uffbb\001\002\000" +
    "\004\040\254\001\002\000\014\016\235\025\231\026\234" +
    "\034\233\037\232\001\002\000\004\041\252\001\002\000" +
    "\042\006\uffeb\007\uffeb\010\uffeb\011\uffeb\013\uffeb\014\uffeb" +
    "\015\uffeb\030\uffeb\031\uffeb\033\uffeb\037\uffeb\040\uffeb\042" +
    "\uffeb\044\uffeb\045\uffeb\050\uffeb\001\002\000\006\035\242" +
    "\041\241\001\002\000\004\037\240\001\002\000\004\041" +
    "\236\001\002\000\004\037\237\001\002\000\042\006\uffe9" +
    "\007\uffe9\010\uffe9\011\uffe9\013\uffe9\014\uffe9\015\uffe9\030" +
    "\uffe9\031\uffe9\033\uffe9\037\uffe9\040\uffe9\042\uffe9\044\uffe9" +
    "\045\uffe9\050\uffe9\001\002\000\042\006\uffe8\007\uffe8\010" +
    "\uffe8\011\uffe8\013\uffe8\014\uffe8\015\uffe8\030\uffe8\031\uffe8" +
    "\033\uffe8\037\uffe8\040\uffe8\042\uffe8\044\uffe8\045\uffe8\050" +
    "\uffe8\001\002\000\004\035\250\001\002\000\004\016\243" +
    "\001\002\000\004\034\244\001\002\000\004\041\245\001" +
    "\002\000\004\035\246\001\002\000\004\037\247\001\002" +
    "\000\040\006\uffc1\007\uffc1\010\uffc1\011\uffc1\013\uffc1\014" +
    "\uffc1\015\uffc1\030\uffc1\033\uffc1\037\uffc1\040\uffc1\042\uffc1" +
    "\044\uffc1\045\uffc1\050\uffc1\001\002\000\004\037\251\001" +
    "\002\000\040\006\uffc2\007\uffc2\010\uffc2\011\uffc2\013\uffc2" +
    "\014\uffc2\015\uffc2\030\uffc2\033\uffc2\037\uffc2\040\uffc2\042" +
    "\uffc2\044\uffc2\045\uffc2\050\uffc2\001\002\000\004\037\253" +
    "\001\002\000\042\006\uffea\007\uffea\010\uffea\011\uffea\013" +
    "\uffea\014\uffea\015\uffea\030\uffea\031\uffea\033\uffea\037\uffea" +
    "\040\uffea\042\uffea\044\uffea\045\uffea\050\uffea\001\002\000" +
    "\004\037\255\001\002\000\042\006\uffe7\007\uffe7\010\uffe7" +
    "\011\uffe7\013\uffe7\014\uffe7\015\uffe7\030\uffe7\031\uffe7\033" +
    "\uffe7\037\uffe7\040\uffe7\042\uffe7\044\uffe7\045\uffe7\050\uffe7" +
    "\001\002\000\004\041\261\001\002\000\004\041\260\001" +
    "\002\000\042\006\uffdc\007\uffdc\010\uffdc\011\uffdc\013\uffdc" +
    "\014\uffdc\015\uffdc\030\uffdc\031\uffdc\033\uffdc\037\uffdc\040" +
    "\uffdc\042\uffdc\044\uffdc\045\uffdc\050\uffdc\001\002\000\042" +
    "\006\uffdd\007\uffdd\010\uffdd\011\uffdd\013\uffdd\014\uffdd\015" +
    "\uffdd\030\uffdd\031\uffdd\033\uffdd\037\uffdd\040\uffdd\042\uffdd" +
    "\044\uffdd\045\uffdd\050\uffdd\001\002\000\004\002\000\001" +
    "\002\000\004\031\270\001\002\000\006\026\163\040\267" +
    "\001\002\000\006\026\227\040\266\001\002\000\012\016" +
    "\235\025\231\026\234\037\232\001\002\000\012\016\171" +
    "\025\165\026\170\037\166\001\002\000\004\046\271\001" +
    "\002\000\026\006\026\007\022\010\027\011\030\014\035" +
    "\015\013\030\014\040\021\042\032\050\024\001\002\000" +
    "\032\006\026\007\022\010\027\011\030\013\067\014\035" +
    "\015\013\030\014\040\021\042\032\045\273\050\024\001" +
    "\002\000\026\006\026\007\022\010\027\011\030\014\035" +
    "\015\013\030\014\040\021\042\032\050\024\001\002\000" +
    "\032\006\026\007\022\010\027\011\030\013\067\014\035" +
    "\015\013\030\014\037\275\040\021\042\032\050\024\001" +
    "\002\000\040\006\uffc5\007\uffc5\010\uffc5\011\uffc5\013\uffc5" +
    "\014\uffc5\015\uffc5\030\uffc5\033\uffc5\037\uffc5\040\uffc5\042" +
    "\uffc5\044\uffc5\045\uffc5\050\uffc5\001\002\000\006\006\301" +
    "\040\300\001\002\000\004\031\325\001\002\000\004\016" +
    "\317\001\002\000\004\040\302\001\002\000\004\016\303" +
    "\001\002\000\004\041\304\001\002\000\004\037\305\001" +
    "\002\000\006\027\041\040\042\001\002\000\004\037\307" +
    "\001\002\000\006\026\311\040\312\001\002\000\004\031" +
    "\uffd0\001\002\000\004\040\316\001\002\000\006\025\313" +
    "\026\314\001\002\000\004\041\315\001\002\000\004\031" +
    "\uffcd\001\002\000\004\031\uffce\001\002\000\004\031\uffcc" +
    "\001\002\000\004\041\320\001\002\000\004\037\321\001" +
    "\002\000\006\027\041\040\042\001\002\000\004\037\323" +
    "\001\002\000\006\026\311\040\312\001\002\000\004\031" +
    "\uffcf\001\002\000\004\032\326\001\002\000\026\006\026" +
    "\007\022\010\027\011\030\014\035\015\013\030\014\040" +
    "\021\042\032\050\024\001\002\000\032\006\026\007\022" +
    "\010\027\011\030\013\067\014\035\015\013\030\014\033" +
    "\330\040\021\042\032\050\024\001\002\000\040\006\uffd1" +
    "\007\uffd1\010\uffd1\011\uffd1\013\uffd1\014\uffd1\015\uffd1\030" +
    "\uffd1\033\uffd1\037\uffd1\040\uffd1\042\uffd1\044\uffd1\045\uffd1" +
    "\050\uffd1\001\002\000\004\002\001\001\002\000\004\031" +
    "\333\001\002\000\004\032\334\001\002\000\026\006\026" +
    "\007\022\010\027\011\030\014\035\015\013\030\014\040" +
    "\021\042\032\050\024\001\002\000\032\006\026\007\022" +
    "\010\027\011\030\013\067\014\035\015\013\030\014\033" +
    "\336\040\021\042\032\050\024\001\002\000\004\002\uffff" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\334\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\003\016\004\015\006" +
    "\022\007\024\010\014\012\033\015\017\020\032\021\035" +
    "\022\030\001\001\000\002\001\001\000\004\004\262\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\004\056" +
    "\006\060\007\062\010\055\011\063\012\067\015\057\020" +
    "\065\021\070\022\064\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\037\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\003\054\004\015\006\022\007" +
    "\024\010\014\012\033\015\017\020\032\021\035\022\030" +
    "\001\001\000\026\004\056\006\060\007\062\010\055\011" +
    "\063\012\067\015\057\020\065\021\070\022\064\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\101\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\003\072\004\015\006\022\007\024\010\014\012\033\015" +
    "\017\020\032\021\035\022\030\001\001\000\026\004\056" +
    "\006\060\007\062\010\055\011\063\012\067\015\057\020" +
    "\065\021\070\022\064\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\076\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\016" +
    "\107\001\001\000\004\017\120\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\003\112\004\015\006\022\007" +
    "\024\010\014\012\033\015\017\020\032\021\035\022\030" +
    "\001\001\000\026\004\056\006\060\007\062\010\055\011" +
    "\063\012\067\015\057\020\065\021\070\022\064\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\003\123\004\015\006\022\007\024\010" +
    "\014\012\033\015\017\020\032\021\035\022\030\001\001" +
    "\000\026\004\056\006\060\007\062\010\055\011\063\012" +
    "\067\015\057\020\065\021\070\022\064\001\001\000\002" +
    "\001\001\000\004\016\126\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\132\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\003\135\004" +
    "\015\006\022\007\024\010\014\012\033\015\017\020\032" +
    "\021\035\022\030\001\001\000\026\004\056\006\060\007" +
    "\062\010\055\011\063\012\067\015\057\020\065\021\070" +
    "\022\064\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\003\141\004\015\006\022\007\024\010\014\012\033" +
    "\015\017\020\032\021\035\022\030\001\001\000\026\004" +
    "\056\006\060\007\062\010\055\011\063\012\067\015\057" +
    "\020\065\021\070\022\064\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\023\220\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\023\225\001\001\000\004\023" +
    "\224\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\003\271\004\015" +
    "\006\022\007\024\010\014\012\033\015\017\020\032\021" +
    "\035\022\030\001\001\000\026\004\056\006\060\007\062" +
    "\010\055\011\063\012\067\015\057\020\065\021\070\022" +
    "\064\001\001\000\026\003\273\004\015\006\022\007\024" +
    "\010\014\012\033\015\017\020\032\021\035\022\030\001" +
    "\001\000\026\004\056\006\060\007\062\010\055\011\063" +
    "\012\067\015\057\020\065\021\070\022\064\001\001\000" +
    "\002\001\001\000\004\014\276\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\305\001\001" +
    "\000\002\001\001\000\004\005\307\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\321\001\001" +
    "\000\002\001\001\000\004\005\323\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\003\326\004\015\006\022" +
    "\007\024\010\014\012\033\015\017\020\032\021\035\022" +
    "\030\001\001\000\026\004\056\006\060\007\062\010\055" +
    "\011\063\012\067\015\057\020\065\021\070\022\064\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\003\334\004\015\006\022\007" +
    "\024\010\014\012\033\015\017\020\032\021\035\022\030" +
    "\001\001\000\026\004\056\006\060\007\062\010\055\011" +
    "\063\012\067\015\057\020\065\021\070\022\064\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // MENSAJE ::= Numero MENSAJE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MENSAJE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // MENSAJE ::= Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MENSAJE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // MENSAJE ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MENSAJE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // MENSAJE ::= Identificador MENSAJE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MENSAJE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // PRINT ::= Print Parentesis_a Identificador Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRINT",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // PRINT ::= Print Parentesis_a Comillas MENSAJE Comillas Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRINT",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ARRAY ::= Int Identificador Corchete_a Corchete_c Igual Corchete_a Numero Corchete_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARRAY",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ARRAY ::= Int Identificador Corchete_a Numero Corchete_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARRAY",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ARRAY ::= T_dato Identificador Corchete_a Corchete_c Igual Corchete_a Numero Corchete_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARRAY",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ARRAY ::= T_dato Identificador Corchete_a Numero Corchete_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARRAY",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // TERNARIO ::= Parentesis_a DECLARACION Parentesis_c Ternario SENTENCIA Dos_p SENTENCIA P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TERNARIO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // DECLARACION_CASE ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_CASE",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DECLARACION_CASE ::= Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_CASE",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DECLARACION_CASE ::= Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_CASE",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SENTENCIA_CASE ::= Case DECLARACION_CASE Dos_p SENTENCIA Break P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CASE",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SENTENCIA_CASE ::= Case DECLARACION_CASE Dos_p SENTENCIA Break P_coma SENTENCIA_CASE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CASE",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SWITCH ::= Switch Parentesis_a Identificador Parentesis_c Llave_a SENTENCIA_CASE Default Dos_p SENTENCIA Break P_coma Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // DECLARACION_FOR ::= Op_incremento Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DECLARACION_FOR ::= Identificador Op_incremento 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DECLARACION_FOR ::= Identificador Op_atribucion Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SENTENCIA_FOR ::= Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SENTENCIA_FOR ::= T_dato Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // FOR ::= For Parentesis_a SENTENCIA_FOR Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DO_WHILE ::= Do Llave_a SENTENCIA Llave_c While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DO_WHILE",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // WHILE ::= While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // IF_ELSE ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c Else Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SENTENCIA_BOOLEANA ::= Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // IF ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECLARACION ::= Identificador Igual Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECLARACION ::= Identificador Op_relacional Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECLARACION ::= Cadena Identificador Igual Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLARACION ::= Cadena Identificador Op_atribucion Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLARACION ::= Cadena Identificador Igual Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARACION ::= Cadena Identificador Op_atribucion Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARACION ::= T_dato Op_incremento Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARACION ::= T_dato Identificador Op_incremento P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARACION ::= T_dato Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARACION ::= T_dato Identificador Op_atribucion Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARACION ::= T_dato Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARACION ::= Int Op_incremento Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARACION ::= Int Identificador Op_incremento P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARACION ::= Int Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARACION ::= Int Identificador Op_atribucion Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARACION ::= Int Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIA ::= PRINT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIA ::= SENTENCIA PRINT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA ::= ARRAY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA ::= SENTENCIA ARRAY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= TERNARIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= SENTENCIA TERNARIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= SWITCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= SENTENCIA SWITCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= SENTENCIA FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= SENTENCIA DO_WHILE DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= SENTENCIA WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= SENTENCIA IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= Main Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Int Main Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

